{"ast":null,"code":"// bucket.js\nimport { db } from '../../firebase';\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\"; // Actions\n\nconst LOAD = 'bucket/LOAD';\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = 'bucket/DELETE';\nconst UPDATE = 'bucket/UPDATE';\nconst initialState = {\n  list: [{\n    text: '영화관 가기',\n    completed: false\n  }, {\n    text: '매일 책읽기',\n    completed: false\n  }, {\n    text: '수영 배우기',\n    completed: false\n  }, {\n    text: '코딩하기',\n    completed: false\n  } // list: [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\", \"수영 배우기\"],\n  ]\n};\nexport function loadBucket(bucket_list) {\n  return {\n    type: LOAD,\n    bucket_list\n  };\n} // Action Creators\n\nexport function createBucket(bucket) {\n  return {\n    type: CREATE,\n    bucket: bucket\n  };\n}\nexport function deleteBucket(bucket_index) {\n  return {\n    type: DELETE,\n    bucket_index\n  };\n}\nexport function updateBucket(bucket_index) {\n  return {\n    type: UPDATE,\n    bucket_index\n  };\n} //middlewares\n\nexport const loadBucketFB = () => {\n  return async function (dispatch) {\n    const bucket_data = await getDocs(collection(db, 'bucket'));\n    console.log(bucket_data);\n    let bucket_list = [];\n    bucket_data.forEach(b => {\n      console.log(b.data());\n      bucket_list.push({ ...b.data()\n      });\n    });\n    console.log(bucket_list);\n  };\n}; // Reducer\n// export default function reducer(state = initialState, action = {}) {\n//   switch (action.type) {\n//     case \"bucket/Create\" : {\n//       const new_bucket_list = [...state.list, action.bucket];\n//       return {list : new_bucket_list};\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === 'bucket/CREATE') {\n    const new_bucket_list = [...state.list, action.bucket];\n    return {\n      list: new_bucket_list\n    };\n  } else if (action.type === 'bucket/DELETE') {\n    const new_bucket_list = state.list.filter((l, idx) => {\n      return parseInt(action.bucket_index) !== idx;\n    });\n    return {\n      list: new_bucket_list\n    };\n  } else if (action.type === 'bucket/UPDATE') {\n    const new_bucket_list = state.list.map((l, idx) => {\n      if (Number(action.bucket_index) === idx) {\n        return { ...l,\n          completed: true\n        };\n      } else {\n        return l;\n      }\n    });\n    return {\n      list: new_bucket_list\n    };\n  } else {\n    return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/이상민/Desktop/programming/sparta_coding/SPARTA_REACT/bucket_list/src/redux/modules/bucket.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","LOAD","CREATE","DELETE","UPDATE","initialState","list","text","completed","loadBucket","bucket_list","type","createBucket","bucket","deleteBucket","bucket_index","updateBucket","loadBucketFB","dispatch","bucket_data","console","log","forEach","b","data","push","reducer","state","action","new_bucket_list","filter","l","idx","parseInt","map","Number"],"mappings":"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","sourcesContent":["// bucket.js\r\nimport {db} from '../../firebase'\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n} from \"firebase/firestore\";\r\n\r\n// Actions\r\nconst LOAD = 'bucket/LOAD'\r\nconst CREATE = \"bucket/CREATE\";\r\nconst DELETE = 'bucket/DELETE';\r\nconst UPDATE = 'bucket/UPDATE';\r\n\r\nconst initialState = {\r\n  list:[\r\n    {text:'영화관 가기', completed:false},\r\n    {text:'매일 책읽기', completed:false},\r\n    {text:'수영 배우기', completed:false},\r\n    {text:'코딩하기', completed:false},\r\n     // list: [\"영화관 가기\", \"매일 책읽기\", \"수영 배우기\", \"수영 배우기\"],\r\n  ] \r\n};\r\nexport function loadBucket(bucket_list){\r\n  return {type: LOAD, bucket_list};\r\n}\r\n// Action Creators\r\nexport function createBucket(bucket){\r\n  return {type: CREATE, bucket: bucket}\r\n}\r\n\r\nexport function deleteBucket(bucket_index){\r\n  return {type: DELETE, bucket_index};\r\n}\r\n\r\nexport function updateBucket(bucket_index){\r\n  return {type:UPDATE, bucket_index};\r\n}\r\n\r\n//middlewares\r\nexport const loadBucketFB = () => {\r\n  return async function (dispatch) {\r\n      const bucket_data = await getDocs(collection(db, 'bucket'));\r\n      console.log(bucket_data);\r\n\r\n      let bucket_list = [];\r\n\r\n    bucket_data.forEach((b) => {\r\n      console.log(b.data());\r\n      bucket_list.push({...b.data()});\r\n    });\r\n    console.log(bucket_list);\r\n  }\r\n}\r\n\r\n// Reducer\r\n// export default function reducer(state = initialState, action = {}) {\r\n//   switch (action.type) {\r\n//     case \"bucket/Create\" : {\r\n//       const new_bucket_list = [...state.list, action.bucket];\r\n//       return {list : new_bucket_list};\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n\r\nexport default function reducer(state = initialState, action = {}){\r\n  if(action.type === 'bucket/CREATE'){\r\n    const new_bucket_list = [...state.list, action.bucket];\r\n    return {list : new_bucket_list};\r\n  } else if(action.type === 'bucket/DELETE'){\r\n      const new_bucket_list = state.list.filter((l, idx) => {\r\n        return parseInt(action.bucket_index) !== idx;\r\n      });\r\n      return {list:new_bucket_list};\r\n  }else if(action.type === 'bucket/UPDATE'){\r\n  const new_bucket_list = state.list.map((l, idx) => {\r\n    if(Number(action.bucket_index) === idx ){\r\n      return {...l, completed:true};\r\n    } else {\r\n      return l;\r\n    }\r\n  })\r\n   return {list:new_bucket_list};\r\n  }else {\r\n    return state;\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}