{"ast":null,"code":"// bucket.js\nimport { db } from \"../../firebase\";\nimport { collection, doc, getDoc, getDocs, addDoc, updateDoc, deleteDoc } from \"firebase/firestore\"; // Actions\n\nconst LOAD = \"bucket/LOAD\";\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = \"bucket/DELETE\";\nconst UPDATE = \"bucket/UPDATE\";\nconst initialState = {\n  is_loaded: false,\n  list: []\n};\nexport function loadBucket(bucket_list) {\n  return {\n    type: LOAD,\n    bucket_list\n  };\n} // Action Creators\n\nexport function createBucket(bucket) {\n  return {\n    type: CREATE,\n    bucket: bucket\n  };\n}\nexport function deleteBucket(bucket_index) {\n  return {\n    type: DELETE,\n    bucket_index\n  };\n}\nexport function updateBucket(bucket_index) {\n  return {\n    type: UPDATE,\n    bucket_index\n  };\n} //middlewares\n\nexport const loadBucketFB = () => {\n  return async function (dispatch) {\n    const bucket_data = await getDocs(collection(db, \"bucket\"));\n    let bucket_list = [];\n    bucket_data.forEach(b => {\n      bucket_list.push({\n        id: b.id,\n        ...b.data()\n      });\n    });\n    dispatch(loadBucket(bucket_list));\n  };\n};\nexport const addBucketFB = bucket => {\n  return async function (dispatch) {\n    const docRef = await addDoc(collection(db, \"bucket\"), bucket); // const _bucket = await getDoc(docRef);\n\n    const bucket_data = {\n      id: docRef.id,\n      ...bucket\n    };\n    dispatch(createBucket(bucket_data));\n  };\n};\nexport const updateBucketFB = bucket_id => {\n  return async function (dispatch, getState) {\n    const docRef = doc(db, 'bucket', bucket_id);\n    await updateDoc(docRef, {\n      completed: true\n    });\n    const _bucket_list = getState().bucket.list;\n\n    const bucket_index = _bucket_list.findIndex(b => {\n      return b.id === bucket_id;\n    });\n\n    dispatch(updateBucket(bucket_index));\n  };\n};\nexport const deleteBucketFB = bucket_id => {\n  return async function (dispatch, getState) {\n    if (!bucket_id) {\n      window.alert('아이디가 없네요');\n      return;\n    }\n\n    const docRef = doc(db, 'bucket', bucket_id);\n    await deleteDoc(docRef);\n    const _bucket_list = getState().bucket.list;\n\n    const bucket_index = _bucket_list.findIndex(b => {\n      return b.id === bucket_id;\n    });\n\n    dispatch(deleteBucket(bucket_index));\n  };\n}; //Reducer\n\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === \"bucket/LOAD\") {\n    return {\n      list: action.bucket_list,\n      is_loaded: true\n    };\n  } else if (action.type === \"bucket/CREATE\") {\n    const new_bucket_list = [...state.list, action.bucket];\n    return { ...state,\n      list: new_bucket_list\n    };\n  } else if (action.type === \"bucket/DELETE\") {\n    const new_bucket_list = state.list.filter((l, idx) => {\n      return parseInt(action.bucket_index) !== idx;\n    });\n    return { ...state,\n      list: new_bucket_list\n    };\n  } else if (action.type === \"bucket/UPDATE\") {\n    const new_bucket_list = state.list.map((l, idx) => {\n      if (Number(action.bucket_index) === idx) {\n        return { ...l,\n          completed: true\n        };\n      } else {\n        return l;\n      }\n    });\n    return { ...state,\n      list: new_bucket_list\n    };\n  } else {\n    return state;\n  }\n} // Reducer\n// export default function reducer(state = initialState, action = {}) {\n//   switch (action.type) {\n//     case \"bucket/Create\" : {\n//       const new_bucket_list = [...state.list, action.bucket];\n//       return {list : new_bucket_list};\n//     }\n//     default:\n//       return state;\n//   }\n// }","map":{"version":3,"sources":["C:/Users/이상민/Desktop/programming/sparta_coding/SPARTA_REACT/bucket_list/src/redux/modules/bucket.js"],"names":["db","collection","doc","getDoc","getDocs","addDoc","updateDoc","deleteDoc","LOAD","CREATE","DELETE","UPDATE","initialState","is_loaded","list","loadBucket","bucket_list","type","createBucket","bucket","deleteBucket","bucket_index","updateBucket","loadBucketFB","dispatch","bucket_data","forEach","b","push","id","data","addBucketFB","docRef","updateBucketFB","bucket_id","getState","completed","_bucket_list","findIndex","deleteBucketFB","window","alert","reducer","state","action","new_bucket_list","filter","l","idx","parseInt","map","Number"],"mappings":"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","sourcesContent":["// bucket.js\r\nimport { db } from \"../../firebase\";\r\nimport {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n} from \"firebase/firestore\";\r\n\r\n// Actions\r\nconst LOAD = \"bucket/LOAD\";\r\nconst CREATE = \"bucket/CREATE\";\r\nconst DELETE = \"bucket/DELETE\";\r\nconst UPDATE = \"bucket/UPDATE\";\r\n\r\nconst initialState = {\r\n  is_loaded:false,\r\n  list: [],\r\n};\r\nexport function loadBucket(bucket_list) {\r\n  return { type: LOAD, bucket_list };\r\n}\r\n// Action Creators\r\nexport function createBucket(bucket) {\r\n  return { type: CREATE, bucket: bucket };\r\n}\r\n\r\nexport function deleteBucket(bucket_index) {\r\n  return { type: DELETE, bucket_index };\r\n}\r\n\r\nexport function updateBucket(bucket_index) {\r\n  return { type: UPDATE, bucket_index };\r\n}\r\n\r\n//middlewares\r\nexport const loadBucketFB = () => {\r\n  return async function (dispatch) {\r\n    const bucket_data = await getDocs(collection(db, \"bucket\"));\r\n\r\n    let bucket_list = [];\r\n\r\n    bucket_data.forEach((b) => {\r\n      bucket_list.push({ id: b.id, ...b.data() });\r\n    });\r\n    dispatch(loadBucket(bucket_list));\r\n  };\r\n};\r\n\r\nexport const addBucketFB = (bucket) => {\r\n  return async function (dispatch) {\r\n    const docRef = await addDoc(collection(db, \"bucket\"), bucket);\r\n    // const _bucket = await getDoc(docRef);\r\n    const bucket_data = { id: docRef.id, ...bucket };\r\n\r\n    dispatch(createBucket(bucket_data));\r\n  };\r\n};\r\n\r\nexport const updateBucketFB = (bucket_id) => {\r\n  return async function(dispatch, getState) {\r\n    const docRef = doc(db, 'bucket', bucket_id);\r\n    await updateDoc(docRef, {completed:true});\r\n\r\n    const _bucket_list = getState().bucket.list;\r\n    const bucket_index = _bucket_list.findIndex((b) => {\r\n      return b.id === bucket_id;\r\n    });\r\n\r\n    dispatch(updateBucket(bucket_index));\r\n  }\r\n}\r\n\r\nexport const deleteBucketFB = (bucket_id) => {\r\n  return async function (dispatch, getState) {\r\n    if(!bucket_id){\r\n      window.alert('아이디가 없네요');\r\n      return;\r\n    }\r\n      const docRef = doc(db, 'bucket', bucket_id);\r\n      await deleteDoc(docRef);\r\n\r\n      const _bucket_list = getState().bucket.list;\r\n      const bucket_index = _bucket_list.findIndex((b) => {\r\n      return b.id === bucket_id;\r\n    });\r\n\r\n    dispatch(deleteBucket(bucket_index));\r\n  }\r\n}\r\n\r\n//Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n  if (action.type === \"bucket/LOAD\") {\r\n    return { list: action.bucket_list, is_loaded:true, };\r\n  } else if (action.type === \"bucket/CREATE\") {\r\n    const new_bucket_list = [...state.list, action.bucket];\r\n    return { ...state, list: new_bucket_list };\r\n  } else if (action.type === \"bucket/DELETE\") {\r\n    const new_bucket_list = state.list.filter((l, idx) => {\r\n      return parseInt(action.bucket_index) !== idx;\r\n    });\r\n    return {...state, list: new_bucket_list };\r\n  } else if (action.type === \"bucket/UPDATE\") {\r\n    const new_bucket_list = state.list.map((l, idx) => {\r\n      if (Number(action.bucket_index) === idx) {\r\n        return { ...l, completed: true };\r\n      } else {\r\n        return l;\r\n      }\r\n    });\r\n    return { ...state, list: new_bucket_list };\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n// Reducer\r\n// export default function reducer(state = initialState, action = {}) {\r\n//   switch (action.type) {\r\n//     case \"bucket/Create\" : {\r\n//       const new_bucket_list = [...state.list, action.bucket];\r\n//       return {list : new_bucket_list};\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}